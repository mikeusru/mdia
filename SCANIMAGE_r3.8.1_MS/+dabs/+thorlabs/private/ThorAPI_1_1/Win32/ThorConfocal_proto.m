function [methodinfo,structs,enuminfo,ThunkLibName]=ThorConfocal_proto
%THORCONFOCAL_PROTO Create structures to define interfaces found in 'LSM_SDK'.

%This function was generated by loadlibrary.m parser version 1.1.6.33 on Tue Nov  1 14:50:23 2011
%perl options:'LSM_SDK.i -outfile=ThorConfocal_proto.m'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival);
ThunkLibName=[];
% long FindCameras ( long & cameraCount ); 
fcns.name{fcnNum}='FindCameras'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'longPtr'};fcnNum=fcnNum+1;
% long SelectCamera ( const long camera ); 
fcns.name{fcnNum}='SelectCamera'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
% long TeardownCamera (); 
fcns.name{fcnNum}='TeardownCamera'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% long GetParamInfo ( const long paramID , long & paramType , long & paramAvailable , long & paramReadOnly , double & paramMin , double & paramMax , double & paramDefault ); 
fcns.name{fcnNum}='GetParamInfo'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long', 'longPtr', 'longPtr', 'longPtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% long SetParam ( const long paramID , const double param ); 
fcns.name{fcnNum}='SetParam'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long', 'double'};fcnNum=fcnNum+1;
% long GetParam ( const long paramID , double & param ); 
fcns.name{fcnNum}='GetParam'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long', 'doublePtr'};fcnNum=fcnNum+1;
% long PreflightAcquisition ( char * pDataBuffer ); 
fcns.name{fcnNum}='PreflightAcquisition'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% long SetupAcquisition ( char * pDataBuffer ); 
fcns.name{fcnNum}='SetupAcquisition'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% long StartAcquisition ( char * pDataBuffer ); 
fcns.name{fcnNum}='StartAcquisition'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% long StatusAcquisition ( long & status ); 
fcns.name{fcnNum}='StatusAcquisition'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'longPtr'};fcnNum=fcnNum+1;
% long SetStatusEvent ( HANDLE hStatusEvent ); 
fcns.name{fcnNum}='SetStatusEvent'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
% long StatusAcquisitionEx ( long & status , long & indexOfLastCompletedFrame ); 
fcns.name{fcnNum}='StatusAcquisitionEx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'longPtr', 'longPtr'};fcnNum=fcnNum+1;
% long CopyAcquisition ( char * pDataBuffer ); 
fcns.name{fcnNum}='CopyAcquisition'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% long PostflightAcquisition ( char * pDataBuffer ); 
fcns.name{fcnNum}='PostflightAcquisition'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% long GetLastErrorMsg ( wchar_t * msg , long size ); 
fcns.name{fcnNum}='GetLastErrorMsg'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'long'};fcnNum=fcnNum+1;
enuminfo.CameraType=struct('CCD',0,'LSM',1);
enuminfo.AveragingMode=struct('AVG_NONE',0,'AVG_CUMULATIVE',1);
enuminfo.ParamType=struct('TYPE_LONG',0,'TYPE_DOUBLE',1);
enuminfo.StatusType=struct('STATUS_BUSY',0,'STATUS_READY',1,'STATUS_ERROR',2);
enuminfo.InputRange=struct('INPUT_RANGE_20_MV',1,'INPUT_RANGE_40_MV',2,'INPUT_RANGE_50_MV',3,'INPUT_RANGE_80_MV',4,'INPUT_RANGE_100_MV',5,'INPUT_RANGE_200_MV',6,'INPUT_RANGE_400_MV',7,'INPUT_RANGE_500_MV',8,'INPUT_RANGE_800_MV',9,'INPUT_RANGE_1_V',10,'INPUT_RANGE_2_V',11,'INPUT_RANGE_4_V',12);
enuminfo.Params=struct('PARAM_FIRST_PARAM',0,'PARAM_TRIGGER_MODE',8,'PARAM_MULTI_FRAME_COUNT',13,'PARAM_CAMERA_TYPE',14,'PARAM_TRIGGER_TIMEOUT_SEC',15,'PARAM_ENABLE_FRAME_TRIGGER_WITH_HW_TRIG',16,'PARAM_LSM_PIXEL_X',200,'PARAM_LSM_FIELD_SIZE',202,'PARAM_LSM_OFFSET_X',203,'PARAM_LSM_OFFSET_Y',204,'PARAM_LSM_CHANNEL',205,'PARAM_LSM_ALIGNMENT',206,'PARAM_LSM_INPUTRANGE1',207,'PARAM_LSM_INPUTRANGE2',208,'PARAM_LSM_CLOCKSOURCE',211,'PARAM_LSM_EXTERNALCLOCKRATE',213,'PARAM_LSM_SCANMODE',214,'PARAM_LSM_AVERAGEMODE',215,'PARAM_LSM_AVERAGENUM',216,'PARAM_LAST_PARAM',217);
enuminfo.TriggerMode=struct('FIRST_TRIGGER_MODE',0,'SW_SINGLE_FRAME',0,'SW_MULTI_FRAME',1,'SW_FREE_RUN_MODE',2,'HW_SINGLE_FRAME',3,'HW_MULTI_FRAME_TRIGGER_FIRST',4,'LAST_TRIGGER_MODE',5);
enuminfo.ScanMode=struct('TWO_WAY_SCAN',0,'FORWARD_SCAN',1,'BACKWARD_SCAN',2,'SCAN_MODE_CENTER',3);
methodinfo=fcns;