function [methodinfo,structs,enuminfo,ThunkLibName]=ThorPMT_proto
%THORPMT_PROTO Create structures to define interfaces found in 'PMT_SDK'.

%This function was generated by loadlibrary.m parser version 1.1.6.33 on Tue Nov  1 14:50:43 2011
%perl options:'PMT_SDK.i -outfile=ThorPMT_proto.m'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival);
ThunkLibName=[];
% long FindDevices ( long & DeviceCount ); 
fcns.name{fcnNum}='FindDevices'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'longPtr'};fcnNum=fcnNum+1;
% long SelectDevice ( const long Device ); 
fcns.name{fcnNum}='SelectDevice'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
% long TeardownDevice (); 
fcns.name{fcnNum}='TeardownDevice'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% long GetParamInfo ( const long paramID , long & paramType , long & paramAvailable , long & paramReadOnly , double & paramMin , double & paramMax , double & paramDefault ); 
fcns.name{fcnNum}='GetParamInfo'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long', 'longPtr', 'longPtr', 'longPtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% long SetParam ( const long paramID , const double param ); 
fcns.name{fcnNum}='SetParam'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long', 'double'};fcnNum=fcnNum+1;
% long GetParam ( const long paramID , double & param ); 
fcns.name{fcnNum}='GetParam'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long', 'doublePtr'};fcnNum=fcnNum+1;
% long PreflightPosition (); 
fcns.name{fcnNum}='PreflightPosition'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% long SetupPosition (); 
fcns.name{fcnNum}='SetupPosition'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% long StartPosition (); 
fcns.name{fcnNum}='StartPosition'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% long StatusPosition ( long & status ); 
fcns.name{fcnNum}='StatusPosition'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'longPtr'};fcnNum=fcnNum+1;
% long ReadPosition ( DeviceType deviceType , double & pos ); 
fcns.name{fcnNum}='ReadPosition'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'DeviceType', 'doublePtr'};fcnNum=fcnNum+1;
% long PostflightPosition (); 
fcns.name{fcnNum}='PostflightPosition'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% long GetLastErrorMsg ( wchar_t * msg , long size ); 
fcns.name{fcnNum}='GetLastErrorMsg'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'long'};fcnNum=fcnNum+1;
enuminfo.StatusType=struct('STATUS_BUSY',0,'STATUS_READY',1,'STATUS_ERROR',2);
enuminfo.DeviceType=struct('DEVICE_TYPE_FIRST',0,'PMT1',1024,'DEVICE_TYPE_LAST',1025);
enuminfo.Params=struct('PARAM_FIRST_PARAM',0,'PARAM_DEVICE_TYPE',0,'PARAM_PMT1_GAIN_POS',700,'PARAM_PMT1_ENABLE',701,'PARAM_PMT2_GAIN_POS',702,'PARAM_PMT2_ENABLE',703,'PARAM_SCANNER_ENABLE',708,'PARAM_LAST_PARAM',709);
enuminfo.ParamType=struct('TYPE_LONG',0,'TYPE_DOUBLE',1);
methodinfo=fcns;